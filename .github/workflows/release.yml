name: Release - Build Executables

on:
  push:
    tags:
      - 'v*'
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a new release'
        required: false
        default: 'false'

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            asset_name: VerseFinder-Linux-x64
            executable_name: VerseFinder
            install_deps: |
              sudo apt-get update
              sudo apt-get install -y \
                build-essential \
                cmake \
                pkg-config \
                libgl1-mesa-dev \
                libglu1-mesa-dev \
                libglfw3-dev \
                libglew-dev \
                nlohmann-json3-dev \
                libcurl4-openssl-dev
          - os: windows-latest
            asset_name: VerseFinder-Windows-x64
            executable_name: VerseFinder.exe
            install_deps: echo "Using FetchContent for Windows dependencies"
          - os: macos-latest
            asset_name: VerseFinder-macOS-x64
            executable_name: VerseFinder
            install_deps: |
              brew install glfw glew nlohmann-json curl

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: ${{ matrix.install_deps }}

    - name: Configure CMake (Release)
      run: cmake -B build -DCMAKE_BUILD_TYPE=Release

    - name: Build
      run: cmake --build build --config Release

    - name: Create release package
      run: |
        mkdir -p release/${{ matrix.asset_name }}
        cp build/${{ matrix.executable_name }} release/${{ matrix.asset_name }}/
        cp README.md release/${{ matrix.asset_name }}/
        cp sample_bible.json release/${{ matrix.asset_name }}/bible.json
        cp presentation_config.json release/${{ matrix.asset_name }}/
        cp -r assets release/${{ matrix.asset_name }}/
        cp -r fonts release/${{ matrix.asset_name }}/
        cp -r data release/${{ matrix.asset_name }}/
        cp -r media release/${{ matrix.asset_name }}/

    - name: Create archive (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        cd release
        tar -czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.asset_name }}

    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd release
        Compress-Archive -Path ${{ matrix.asset_name }} -DestinationPath ${{ matrix.asset_name }}.zip

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: |
          release/${{ matrix.asset_name }}.tar.gz
          release/${{ matrix.asset_name }}.zip
        retention-days: 30

  create-release:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true'
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate release tag
      id: tag
      run: |
        TAG="v$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)"
        echo "tag=$TAG" >> $GITHUB_OUTPUT

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        release_name: VerseFinder ${{ steps.tag.outputs.tag }}
        body: |
          # VerseFinder Release ${{ steps.tag.outputs.tag }}
          
          Automated release with executables for all supported platforms.
          
          ## Features
          - Advanced presentation features with animations and visual effects
          - Cross-platform support (Linux, Windows, macOS)
          - High-performance Bible verse search and display
          - Professional worship presentation capabilities
          
          ## Installation
          1. Download the appropriate package for your platform
          2. Extract the archive
          3. Run the VerseFinder executable
          4. Place your bible.json file in the same directory
          
          ## Supported Platforms
          - Linux (x64)
          - Windows (x64) 
          - macOS (x64)
        draft: false
        prerelease: false

    - name: Upload Linux Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/VerseFinder-Linux-x64/VerseFinder-Linux-x64.tar.gz
        asset_name: VerseFinder-Linux-x64.tar.gz
        asset_content_type: application/gzip

    - name: Upload Windows Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/VerseFinder-Windows-x64/VerseFinder-Windows-x64.zip
        asset_name: VerseFinder-Windows-x64.zip
        asset_content_type: application/zip

    - name: Upload macOS Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/VerseFinder-macOS-x64/VerseFinder-macOS-x64.tar.gz
        asset_name: VerseFinder-macOS-x64.tar.gz
        asset_content_type: application/gzip